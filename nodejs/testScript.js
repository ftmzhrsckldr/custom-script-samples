/**
 * This Script was generated by ChatGPT to test the
 * https://github.com/appcircleio/appcircle-custom-script-from-git-component component.
 */

const fs = require("fs");

function log(msg) {
  console.log("[TestScript.js]", msg);
}

function fail(msg) {
  console.error("[TestScript.js][ERROR]", msg);
  process.exit(1);
}

function writeFile(filename, content) {
  try {
    fs.writeFileSync(filename, content);
    log(`âœ… Wrote file: ${filename}`);
  } catch (e) {
    fail(`Failed to write file: ${e.message}`);
  }
}

function main() {
  const args = process.argv.slice(2);
  const envVar = process.env.TEST_ENV_VAR || "No TEST_ENV_VAR provided";
  const envFilePath = process.env.AC_ENV_FILE_PATH;

  log("ðŸ”¸ Arguments received:");
  args.forEach((arg, i) => log(`Arg[${i}]: ${arg}`));

  log(`ðŸ”¸ Environment TEST_ENV_VAR: ${envVar}`);

  // Simulate edge case: invalid JSON passed as parameter
  const jsonArg = args.find((a) => a.startsWith("--json="));
  if (jsonArg) {
    const jsonString = jsonArg.split("=")[1];
    try {
      const parsed = JSON.parse(jsonString);
      log("âœ… Valid JSON input received:");
      console.log(parsed);
    } catch (e) {
      fail("Invalid JSON provided via --json parameter");
    }
  }

  // Simulate optional output to AC_ENV_FILE_PATH
  if (envFilePath) {
    try {
      fs.appendFileSync(envFilePath, `JS_SCRIPT_OUTPUT=done\n`);
      log(`âœ… Appended output to AC_ENV_FILE_PATH: ${envFilePath}`);
    } catch (e) {
      fail(`Could not write to AC_ENV_FILE_PATH: ${e.message}`);
    }
  }

  // Simulate conditional failure
  if (args.includes("--fail")) {
    fail("Forced failure via --fail argument");
  }

  writeFile("node_output.txt", `Script completed at ${new Date().toISOString()}`);
  log("âœ… Script finished successfully.");
}

main();
